networks:
  frontend:
    name: frontend
  backend:
    name: backend
  database:
    name: database

services:
  postgres:
    container_name: postgres
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    container_name: app
    build: 
      context: ./backend/app
      dockerfile: Dockerfile
      args:
        - MAVEN_OPTS=-Dmaven.repo.local=/root/.m2/repository
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SERVER_PORT: ${SERVER_PORT}
    expose:
      - "${SERVER_PORT}"
    networks:
      - backend
      - database

  gateway:
    container_name: gateway
    build:
      context: ./backend/gateway
      dockerfile: Dockerfile
      args:
        - MAVEN_OPTS=-Dmaven.repo.local=/root/.m2/repository
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      - postgres
      - app
    env_file:
      - .env
    environment:
      APP_SERVICE_URL: http://app:${SERVER_PORT}/api/v1
      SERVER_PORT: ${GATEWAY_PORT}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_LIFETIME: ${JWT_LIFETIME}
    expose:
      - "${GATEWAY_PORT}"
    networks:
      - backend
      - database

  web:
    container_name: web
    image: nginx:alpine
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    expose:
      - "${NGINX_PORT}"
    depends_on:
      - app
      - gateway
    networks:
      - frontend
      - backend

  nginx:
    container_name: nginx
    image: nginx:stable-alpine
    env_file:
      - .env
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
      - gateway
    networks:
      - frontend
      - backend

volumes:
  postgres_data:
  maven_cache: 
